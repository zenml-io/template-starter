# GLOBAL PROMPT --------------------------------

template:
    type: str
    help: >-
        The project template you would like to use
    choices:
        ZenML Starter: starter
    default: starter
project_name:
    type: str
    help: Short name for your project
    default: ZenML Starter
version:
    type: str
    help: |
        Version of your project
    default: "0.1.0"
open_source_license:
    type: str
    help: >-
        The license under which your project will be released
    choices:
        Apache Software License 2.0: apache
        MIT license: mit
        BSD license: bsd
        ISC license: isc
        GNU General Public License v3: gpl3
        Not open source: none
    default: apache
full_name:
    type: str
    help: >-
        The name of the person/entity holding the copyright
    default: ZenML GmbH
    when: "{{ open_source_license }}"
email:
    type: str
    help: >-
        The email of the person/entity holding the copyright
    default: info@zenml.io
    when: "{{ open_source_license }}"
auto_format:
    type: bool
    help: >-
        Auto-format the generated code with black, ruff and autoflake ? (NOTE:
        you need to have these tools installed in your environment)
    default: false

# SUB-TEMPLATE PROMPT [starter] ---------------------
use_step_params:
    type: bool
    help: >-
        Would you like to see step parameters being used in the generated ZenML
        steps?
    default: false
    when: "{{ template == 'starter' }}"
use_custom_artifacts:
    type: bool
    help: >-
        Would you like to see custom artifact data types and materializers being
        used in the generated ZenML steps and pipelines?
    default: false
    when: "{{ template == 'starter' }}"
configurable_dataset:
    type: bool
    help: >-
        Would you like to be able to select the dataset used in model training
        at runtime through the CLI and as a data loader step parameter ?
    default: false
    when: "{{ template == 'starter' and use_step_params }}"
sklearn_dataset_name:
    type: str
    help: >-
        The generated ZenML project will be populated with some example code
        featuring one of the UCI ML datasets from scikit-learn.
        Which dataset would you like to see being used in the generated code?
    choices:
        UCI Wine Data Set (classification): wine
        UCI Iris Data Set (classification): iris
        UCI Breast Cancer Wisconsin (Diagnostic) Data Set (classification): breast_cancer
    default: wine
    when: "{{ template == 'starter' }}"
configurable_model:
    type: bool
    help: >-
        Would you like to be able to select the type of model used in model
        training at runtime through the CLI and as a model trainer step
        parameter ?
    default: false
    when: "{{ template == 'starter' and use_step_params }}"
sklearn_model_name:
    type: str
    help: >-
        The generated ZenML project will be populated with some example code
        featuring one of the scikit-learn classifier models.
        Which model class would you like to see being used in the generated code?
    choices:
        Logistic Regression: LogisticRegression
        C-Support Vector Classification: SVC
        Linear Support Vector Classification: LinearSVC
        Random Forest Classifier: RandomForestClassifier
        K-Nearest Neighbors Classifier: KNeighborsClassifier
        Gaussian Naive Bayes: GaussianNB
        Linear Perceptron Classifier: Perceptron
        Stochastic Gradient Descent Linear Classifier: SGDClassifier
        Decision Tree Classifier: DecisionTreeClassifier
    default: LogisticRegression
    when: "{{ template == 'starter' }}"

# CONFIGURATION -------------------------
_templates_suffix: ""
_subdirectory: "{{ template }}/template"
_exclude:
    - /README.md
_tasks:
    - |
        {{ _copier_python }} -m autoflake --remove-all-unused-imports \
            --recursive \
            --remove-unused-variables \
            --in-place \
            --exclude=__init__.py \
            . > /dev/null 2>&1 || true
    - |
        {{ _copier_python }} -m ruff --select I \
            --fix --ignore D \
            . > /dev/null 2>&1 || true
    - |
        {{ _copier_python }} -m black \
            --exclude '' --include '\.pyi?$' -l 79 \
            . > /dev/null 2>&1 || true
    - |
        cat WELCOME.txt && rm WELCOME.txt

_jinja_extensions:
    - jinja2_time.TimeExtension
